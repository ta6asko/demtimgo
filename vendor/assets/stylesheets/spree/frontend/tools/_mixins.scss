// Center Unknown
//
// Center an element vertically and horizontally within an element without a fixed width/height
//
// @include centerUnknown(child/parent/both) - `centerUnknown($elem : child)`
//
// Styleguide Tools.Mixins.CenterUnknown
@mixin centerUnknown ($elem : child) {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Clear
//
// Clear floats
//
// @import clear(element/pseudo) - `clear($element)`
//
// Styleguide Tools.Mixins.Clear
@mixin clear($element) {
  @if ($element == element) {
    clear: both;
  }

  @if ($element == pseudo) {
    &:after {
      content: '';
      display: block;
      clear: both;
    }
  }
}

// Mark required fields
//
// Add required marker `*` using before or after pseudo element
//
// @import required-mark(before/after) - `required-mark(after)`
//
// Styleguide Tools.Mixins.Required
@mixin required-mark($position: before) {
  @if ($position == before) {
    &::before {
      content: '*';
      padding-left: 6px;
    }
  } @else {
    &::after {
      content: '*';
      padding-left: 6px;
    }
  }

}

// Content Full Width Wrapper
//
// Apply the site-full-width to an element
//
// Is responsive
//
// @import contentFullWidthWrapper() - `contentFullWidthWrapper()`
//
// Styleguide Tools.Mixins.Wrapper
@mixin contentFullWidthWrapper() {
  max-width: $page-width-full-width;
  width: 100%;
  margin-left: auto;
  margin-right: auto;

  @media (max-width: $page-width-content - 1px) {
    padding-left: 20px;
    padding-right: 20px;
  }

  @media (max-width: $breakpoint_large - 1px) {
    padding-left: 15px;
    padding-right: 15px;
  }
}

// Content Wrapper
//
// Apply the site-width to an element
//
// Is responsive
//
// @import contentWrapper() - `contentWrapper()`
//
// Styleguide Tools.Mixins.Wrapper
@mixin contentWrapper() {
  max-width: $page-width-content;
  width: 100%;
  margin-left: auto;
  margin-right: auto;

  @media (max-width: $page-width-content - 1px) {
    padding-left: 20px;
    padding-right: 20px;
  }

  @media (max-width: $breakpoint_large - 1px) {
    padding-left: 15px;
    padding-right: 15px;
  }
}

// PDP Content Wrapper
//
// Apply the pdp-width to an element
//
// Is responsive
//
// @import pdpContentWrapper() - pdpContentWrapper()
//
// Styleguide Tools.Mixins.PDPWrapper
@mixin pdpContentWrapper() {
  max-width: $page-width-pdp;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
}

// Mobile Remove Flex
//
// Remove flex property on tabulated data & set items to 100% block for mobile display
//
// Is responsive
//
// @import remove-flex-mobile() - `remove-flex-mobile()`
//
// Styleguide Tools.Mixins.MobileRemoveFlex
@mixin remove-flex-mobile() {
  @media (max-width: $breakpoint-medium) {
    width: 100%;
    display: block;
    flex: none;
  }
}

// Placeholder
//
// Add placeholder browser pseudo elements
//
// @import placeholder { ... } - `placeholder()`
//
// Styleguide Tools.Mixins.Placeholder

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
    opacity: 1;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
    opacity: 1;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

// Reset UL / OL
//
// Reset padding, margin and list style, typically for use with UL's or OL's
//
// @include resetUL - `resetUL`
//
// Styleguide Tools.Mixins.ResetUL
@mixin resetUL {
  margin: 0;
  padding: 0;
  list-style: none;
}

// Reset Paragraph
//
// Reset margin, typically for use with Paragraph tags
//
// @include resetP - `resetP`
//
// Styleguide Tools.Mixins.ResetP
@mixin resetP {
  margin: 0;
}

// Reset Anchor
//
// Reset font colour, text-decoration, outline, hover and active styles
//
// @include resetAnchor - `resetAnchor`
//
// Styleguide Tools.Mixins.ResetAnchor
@mixin resetAnchor {
  color: inherit;
  text-decoration: none;
  outline: none;

  &:hover,
  &:active,
  &:focus {
    color: inherit;
    text-decoration: none;
    outline: none;
  }
}

// CSS Arrow
//
// Create an arrow using CSS border and transform rotation
//
// This mixin doesn't set *colour* of the arrow
//
// * **$direction** up/right/down/left
// * **$size** The size of the arrow. Arrow will be displayed as a square
// * **$thickness** Thickness of the line
//
// @include cssArrow($direction, $size, $thickness) - `cssArrow()`
//
// Styleguide Tools.Mixins.CSSArrow
@mixin cssArrow($direction, $size, $thickness) {
  border: $thickness solid;
  border-bottom-width: 0;
  border-left-width: 0;
  width: $size;
  height: $size;

  // "7.6" seems to be a bit of a magic number that will align the arrow correctly so it isn't cut off by element
  // boundaries when rotated
  @if ($direction == 'up') {
    transform: translate($size/7.6, $size/7.6) rotate(-45deg);
  } @else if ($direction == 'right') {
    transform: translate($size/7.6, $size/7.6) rotate(45deg);
  } @else if ($direction == 'bottom') {
    transform: translate($size/7.6, $size/7.6) rotate(135deg);
  } @else if ($direction == 'left') {
    transform: translate($size/7.6, $size/7.6) rotate(-135deg);
  }
}

// Column
//
// Make a container a column with a specified width.
//
// If the parameter passed in doesn't contain a unit, i.e. it's a fraction or decimal, then it will be converted
// to it's equivalent percentage
//
// At the mobile breakpoint, columns revert to 100% width
//
// The parent element needs the class display: flex; applied for the below flex properties to be applied.
//
// **Examples**
//
// @include column(50%) - percentage
// @include column(1/2) - fraction (i.e. this container is 1 of 2 columns)
// @include column(2/3) - fraction (i.e. this container is 2 of 3 columns)
// @include column(0.3) - decimal
//
// Styleguide Tools.Mixins.Column
@mixin column($width) {
  flex: 1 1 100%;

  @media (min-width: $breakpoint-large) {
    @if (unitless($width)) {
      flex: 1 1 percentage($width);
    } @else {
      flex: 1 1 $width;
    }
  }
}

// Visually hidden
//
// Hide an element but keep it accessible - WCAG and SEO-friendly
//
// https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/
//
// @include visually-hidden - `visually-hidden`
//
// Styleguide Tools.Mixins.VisuallyHidden
@mixin visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

// Address
//
// Common styling for displaying addresses
//
// @include address - `address`
//
// Styleguide Tools.Mixins.Address
@mixin address {
  color: $text-grey;
  line-height: 1.3;

  // Remove link styling of phone number
  a[href^="tel:"] {
    color: inherit;
    text-decoration: none;
    pointer-events: none;
  }
}

@mixin fade-in() {
  animation-name: fade-in;
  animation-duration: 1s;
  animation-fill-mode: both;
}

@mixin pseudo-icon($width, $height) {
  content: '';
  display: inline-block;
  width: $width;
  height: $height;
}

@mixin error-message-icon($width, $height) {
  @include pseudo-icon($width, $height);
  min-width: $width;
  background: url('../images/icons/icon-error-message.svg') no-repeat center;
}

@mixin success-message-icon($width, $height) {
  @include pseudo-icon($width, $height);
  min-width: $width;
  background: url('../images/icons/icon-success-message.svg') no-repeat center;
}

/**
 * Logo mixin to provide common style for header logo, this mixin is used by site header and checkout page
 */
@mixin logo {
  width: 100%;
  align-self: flex-start;

  @media (max-width: $breakpoint-large - 1px) {
    margin-left: 18px;
    padding-top: 7px;
  }

  @media (max-width: $breakpoint-tablet - 1px) {
    margin-left: 15px;
  }

  img {
    display: block;

    @media (min-width: $breakpoint-large) {
      width: 167px;
      height: 57px;
    }

    @media (max-width: $breakpoint-large - 1px) {
      width: 146px;
      height: 50px;
    }

    @media (max-width: $breakpoint-tablet - 1px) {
      width: 88px;
      height: 30px;
    }
  }
}

/**
 * nav-menu-order mixin to generate flex order styling from 0 to $number for navigation menu
 */
@mixin nav-menu-order($number) {
  @for $i from 0 to $number {
    .nav-menu-order--#{$i} {
      order: $i;
    }
  }
}
